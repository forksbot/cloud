//! Security cameras typically create a media recording when motion or sound is detected.
//! You implement the Alexa.MediaMetadata interface to notify Alexa when a new media recording is added to the camera history,
//! or an existing media recording is deleted from history. Your skill can also respond to requests for information about a particular media recording.
//!
//! Alexa stores the list of media recordings that you provide and responds to requests to view recordings.
//! Alexa stores only the list of recordings. The recordings are typically stored in your device cloud.

use serde::{Serialize, Deserialize};
use chrono::{DateTime, Utc};

use crate::{
    property_types::ChannelPropertyValue,
    directive::{Command, Directive},
    event::{
        discovery::{DeviceEndpoint, Capability, CapabilityAdditional},
        properties::{Property, PropertyName}, self,
    },
    utils_serde::ArrayOfStaticStrings,
    Header,
    Endpoint
};

const INTERFACE_NAME: &'static str = "Alexa.MediaMetadata";

/// A media object
/// https://developer.amazon.com/de/docs/device-apis/alexa-mediametadata.html#media-object
#[derive(Serialize, Deserialize)]
pub struct MediaObject {
    /// A unique identifier for this media recording.
    /// The identifier must be unique across all devices owned by a user within the domain for the skill.
    /// String less than 256 characters. Must contain letters, numbers or underscore only.
    pub id: String,
    /// A name for the media recording, either assigned by the user or auto-generated by the endpoint.
    pub name: Option<String>,
    /// Indicates the reason why the media was created or updated.
    pub cause: MediaObjectCause,
    /// The time that the media recording started.
    #[serde(rename = "startTime")]
    pub start_time: DateTime<Utc>,
    /// The time that the media recording ended.
    #[serde(rename = "endTime")]
    pub end_time: DateTime<Utc>,
    /// The video codec used for the recording. An MP4 with H264 codec is recommended. We do support HLS which are compatible with ExoPlayer 1.5.9.
    /// Supported value: H264
    #[serde(rename = "videoCodec")]
    pub video_codec: String,
    /// Audio codec used for the recording.
    /// Supported values: G711, AAC, NONE
    #[serde(rename = "audioCodec")]
    pub audio_codec: String,
    /// Object that provides the location and expiry of the recording.
    pub uri: Uri,
    /// Object that contains a URI to an image captured from the video that can be used as a thumbnail.
    #[serde(rename = "thumbnailUri")]
    pub thumbnail_uri: Uri,
}

#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize)]
pub enum MediaObjectCause {
    /// motion was detected
    MOTION_DETECTED,
    /// audio was detected
    AUDIO_DETECTED,
    /// a person was detected
    PERSON_DETECTED,
    /// customer interacted with an application
    APP_INTERACTION,
    /// customer initiated a voice interaction with Alexa
    VOICE_INTERACTION,
    /// a device rule was initiated
    RULE_TRIGGER,
}

#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize)]
pub enum MediaErrorTypes {
    /// Indicates the requested recording has been deleted.
    DELETED,
    /// Indicates the requested recording cannot be found in the list of stored recordings.
    NOT_FOUND,
    /// Indicates that the requested recording is not available due to subscription issues. For example, a premium subscription is required to access a week old recording.
    SUBSCRIPTION_ERROR,
    /// Indicates an internal service error has occurred and the requested recording cannot be provided.
    INTERNAL_ERROR,
}

#[derive(Serialize, Deserialize)]
pub struct Uri {
    /// A short-lived URI for the recording or thumbnail.
    /// Must be a HTTPS URI, and the hostname should match the common name or subject alternative name provided in the SSL certificate.
    pub value: String,
    /// The time that the URI expires. The recommended time to expiration is 10 minutes.
    #[serde(rename = "expireTime")]
    pub expire_time: DateTime<Utc>,
}

/// Provides media recordings that are not available at request time, and why they are not available.
#[derive(Serialize, Deserialize)]
pub struct MediaError {
    #[serde(rename = "mediaId")]
    pub media_id: String,
    pub status: String,
}

#[derive(Serialize, Deserialize)]
pub struct MediaPayload {
    /// A collection of media objects that describe the media recordings that have been created or updated.
    pub media: Vec<MediaObject>,
    /// Provides media recordings that are not available at request time, and why they are not available.
    pub error: Vec<MediaError>,
}

#[derive(Serialize, Deserialize)]
pub struct MediaDeletePayload {
    /// An array of media identifiers that describe the media items that have been deleted
    #[serde(rename = "mediaId")]
    pub media_id: Vec<String>,
}


/// Add Alexa.MediaMetadata capability to a device endpoint for discovery responses
#[inline]
pub fn add_to_endpoint(endpoint: &mut DeviceEndpoint, proactively_reported: bool) {
    endpoint.capabilities.push(Capability::new(CapabilityAdditional::MediaMetadata { proactively_reported }));
}

/// If the GetMediaMetadata directive was successfully handled, you should respond with an GetMediaMetadata.Response event.
/// This response provides metadata that describes the requested item(s).
pub type GetMediaMetadataResponse = event::Response<event::EmptyPayload, event::EventWithoutEndpoint<MediaPayload>>;

impl GetMediaMetadataResponse {
    pub fn new(payload: MediaPayload) -> Self {
        let header = Header::new(INTERFACE_NAME, "GetMediaMetadata.Response");
        event::Response::new(event::EventWithoutEndpoint::new(header, payload))
    }
}

/// Notifies Alexa that a media recording has been created or updated. Send this event as an HTTP POST to the Alexa event gateway.
pub type MediaCreatedOrUpdatedReport = event::Response<event::EmptyPayload, event::Event<MediaPayload>>;

impl MediaCreatedOrUpdatedReport {
    pub fn new(payload: MediaPayload, endpoint: Endpoint) -> Self {
        let header = Header::new(INTERFACE_NAME, "MediaCreatedOrUpdated");
        event::Response::new(event::Event::new(header, endpoint, payload))
    }
}

/// Notifies Alexa that a media recording has been deleted. Send this event as an HTTP Post to the Alexa event gateway.
pub type MediaDeletedReport = event::Response<event::EmptyPayload, event::Event<MediaDeletePayload>>;

impl MediaDeletedReport {
    /// Create a report for deleted media ids
    pub fn new(media_id: Vec<String>, endpoint: Endpoint) -> Self {
        let header = Header::new(INTERFACE_NAME, "MediaDeleted");
        event::Response::new(event::Event::new(header, endpoint, MediaDeletePayload{media_id}))
    }
}

#[cfg_attr(feature = "derive_debug", derive(Debug))]
#[derive(Deserialize)]
pub struct DirectiveGetMediaMetadata {
    /// Filter the media items based on the provided media identifiers.
    pub filters: Vec<String>
}

impl Directive for DirectiveGetMediaMetadata { const NAME: &'static str = "GetMediaMetadata"; }
